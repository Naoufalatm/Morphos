<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_thread_8c" xml:lang="en-US">
<title>src/thread.c File Reference</title>
<indexterm><primary>src/thread.c</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;obz_scheduler.h&quot;<?linebreak?>#include &quot;thread.h&quot;<?linebreak?>#include &quot;scheduler.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_thread_8c_1adfadb6ad96125df980076ac41983ceb3">green_thread_create</link> (void(*function)(void *), void *arg)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_thread_8c_1a7714de4b56e9edd12c75f4781688edef"/><link linkend="_structScheduler">Scheduler</link> <emphasis role="strong">scheduler</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><formalpara><title>Author</title>

<para>: Obz team</para>
</formalpara>
This file contains functions concerning the scheduler , and the spawn function ( green_thread_create ) , the distincting between this name and &apos;spawn&apos; is made because green_thread_create does create a wrapper around our user-defined anonymous functions and append it into an already global allocated array for green_threads ! </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_thread_8c_1adfadb6ad96125df980076ac41983ceb3"/><section>
    <title>green_thread_create()</title>
<indexterm><primary>green_thread_create</primary><secondary>thread.c</secondary></indexterm>
<indexterm><primary>thread.c</primary><secondary>green_thread_create</secondary></indexterm>
<para><computeroutput>int green_thread_create (void(* function&#160;)(void *), void * arg)</computeroutput></para>
<para>This function does create a wrapper around user-defined anonymous function and append it to the global thread array &apos;scheduler.threads[]&apos; </para>
</section>
</section>
</section>
